// Author: Remco de Boer
// Date: June 8th, 2018
// For NIKHEF Project 2018

/* === CLASS DESCRIPTION =======
	This algorithm reads the data file that is generated by the calorimeter. This data file is just a long text file that defines an arbitrary number of "calo events" that each contain 1024 values. These values have to be integrated to obtain the cumulative energy detected by the calorimeter in an event. In this algorithm, this is done by computing the sum of its histogram. There is a seperate algorithm for computing the energy with a fit.
*/

#ifndef TCALOLOADER_H
#define TCALOLOADER_H 1

// === INCLUDES =======
	#include <fstream>
	#include "TAlgorithm.h"
	#include "TCaloEvent.h"

// === CLASS DEFINITION =======
class TCaloLoader : public TAlgorithm {

public:
	// Constructors and destructors
	// no writing operation, so writing bit set to false
	TCaloLoader(TClipboard* cp)
		: TAlgorithm(cp,"TCaloLoader",false) {}
	TCaloLoader(TClipboard* cp, Bool_t debug)
		: TAlgorithm(cp,"TCaloLoader",false,debug) {}
	~TCaloLoader() {}

	// Algorithm step functions
	void Initialise();
	StatusCode Run();
	void Finalise();

private:
	// Private functions
	UInt_t DetermineNEvents();
	Bool_t LoadCaloEvent();
	// Data members
	std::ifstream fFileStream;
	TCaloEvent* fCaloEvent;
	// Read dump
	Int_t fNCaloPoints; // number of data points in the calorimeter
	UInt_t    fEventNumber; // event number as in data file
	ULong64_t fTimestamp;   // timestamp as in data file
	Double_t  fValue;       // value of calo data point

};

#endif // TCALOLOADER_H