// Author: Remco de Boer
// Date: June 7th, 2018
// For NIKHEF Project 2018

/* === CLASS DESCRIPTION =======
	This algorithm reads the data file that is generated by the calorimeter. This data file is just a long text file that defines an arbitrary number of "calo events" that each contain 1024 values. These values have to be integrated to obtain the cumulative energy detected by the calorimeter in an event.
	Curently, the enrgy computation is done in three ways: using (1) the sum of the measured spectrum, (2) by integrating a specific function for this shape and (3) by doing (2) but with a Landau function. To Compare the two fit routines, a TTree is also stored to the output root file.
*/

#ifndef TCALOLOADER_T
#define TCALOLOADER_T 1

// === INCLUDES =======
	#include <fstream>
	#include "TAlgorithm.h"
	#include "TCaloEvent.h"
	#include "TH1I.h"
	#include "TTree.h"

// === CLASS DEFINITION =======
class TCaloLoader : public TAlgorithm {

public:
	// Constructors and destructors
	// has writing operation, so writing bit set to false
	TCaloLoader(TClipboard* cp)
		: TAlgorithm(cp,"TCaloLoader",true) {}
	TCaloLoader(TClipboard* cp, Bool_t debug)
		: TAlgorithm(cp,"TCaloLoader",true,debug) {}
	~TCaloLoader() {}

	// Algorithm step functions
	void Initialise();
	StatusCode Run();
	void Finalise();

	// Write functions
	void WriteHistograms();

private:
	// Private functions
	UInt_t DetermineNEvents();
	Bool_t LoadCaloEvent();
	// Data members
	std::ifstream fFileStream;
	TCaloEvent* fCaloEvent;
	TH1I* fEnergySpectrumFit;
	TH1I* fEnergySpectrumSum;
	TTree* fTree;
	// Fit results
	Double_t fEnergy0;
	Double_t fEnergy1;
	Double_t fEnergy2;
	Double_t fChiSq1;
	Double_t fChiSq2;
	Double_t fChiSq1div;
	Double_t fChiSq2div;
	Int_t fNDF1;
	Int_t fNDF2;
	// Read dump
	UShort_t fNCaloPoints;
	UInt_t fEventNumber;
	ULong64_t fTimestamp;
	Short_t fValue;

};

#endif // TTIMEPIXEVENTLOADER_H