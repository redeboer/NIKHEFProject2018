// Author: Remco de Boer
// Date: June 7th, 2018
// For NIKHEF Project 2018

/* === CLASS DESCRIPTION =======
	This algorithm reads the data file that is generated by the calorimeter. This data file is just a long text file that defines an arbitrary number of "calo events" that each contain 1024 values. These values have to be integrated to obtain the cumulative energy detected by the calorimeter in an event.
	Curently, the enrgy computation is done in three ways: using (1) the sum of the measured spectrum, (2) by integrating a specific function for this shape and (3) by doing (2) but with a Landau function. To Compare the two fit routines, a TTree is also stored to the output root file.
*/

// === INCLUDES =======
	#include "TCaloLoader.h"
	#include "TF1.h"
	#include "TList.h"
	#include <iostream>
	#include <stdio.h>
	using namespace std;
	using namespace NIKHEFProject;

// === ALGORITHM STEP FUNCTIONS =======

	// INITIALISE FUNCTION: opens the text file and creates histogram
	void TCaloLoader::Initialise()
	{
		// Open file stream and check if open
		fFileStream.open(pCaloFileName);
		if(!fFileStream.is_open()) {
			if(fDebug) cout << "File \"" << pCaloFileName << "\" does not exist!" << endl;
			return;
		}
		// Determine number of events
		DetermineNEvents();
		// Create spectrum histograms
		fEnergySpectrumFit = new TH1I( "energies_fit",
			"Energy spectrum (computed with fit);E (a.u.);Count",
			100, 0, 2e6 );
		fEnergySpectrumSum = new TH1I( "energies_sum",
			"Energy spectrum (computed with sum);E (a.u.);Count",
			100, 0, 2e6 );
		// Create TTree
		fTree = new TTree("calo_fits","fit results of calo events");
		fTree->Branch("energy_sum",   &fEnergy0,"energy_sum/D");
		fTree->Branch("energy_fit",   &fEnergy1,"energy_fit/D");
		fTree->Branch("energy_landau",&fEnergy2,"energy_landau/D");
		fTree->Branch("chi2_fit",     &fChiSq1, "chi2_fit/D");
		fTree->Branch("chi2_landau",  &fChiSq2, "chi2_landau/D");
		fTree->Branch("ndf_fit",      &fNDF1,   "ndf_fit/I");
		fTree->Branch("ndf_landau",   &fNDF2,   "ndf_landau/I");
		fTree->Branch("chi2div_fit",   &fChiSq1div,"chi2div_fit/D");
		fTree->Branch("chi2div_landau",&fChiSq2div,"chi2div_landau/D");
	}

	// RUN FUNCTION: read the next calo event in the text file and create a TCaloEvent from it
	StatusCode TCaloLoader::Run()
	{
		// Return FINISHED if file does not exist
		if (!fFileStream.is_open()) {
			if(fDebug) cout << endl << "File \"" << pCaloFileName << "\" does not exist" << endl;
			return Finished;
		}
		// Return FINISHED if end of file is reached
		if(fFileStream.eof()) {
			if(fDebug) cout << endl << "End of file \"" << pCaloFileName << endl;
			return Finished;
		}
		// Return SUCCESS if a calo event could be read from position in file stream
		if(LoadCaloEvent()) {
			fEnergy0 = fCaloEvent->GetEnergy();
			fEnergySpectrumSum->Fill(fEnergy0);
			// debugging output
			if(fDebug) {
				printf("\n  Fit of calo event %u (%u)\n", fEventNumber, fTimestamp);
				printf("    Energy (sum): %.0f\n", fEnergy0 );
			}
			// output if fit has been performed
			fCaloEvent->Fit(); // (UN)COMMENT THIS IF NO FIT COMPUTATION
			TF1* fit = NULL;
			if(fCaloEvent->GetFit()) {
				// Fill fit energy spectrum
				fEnergySpectrumFit->Fill(fCaloEvent->GetEnergyFit());
				if(fDebug) printf("  Energy (fit): %.0f\n", fCaloEvent->GetEnergyFit());
				// Compute tree values
				fit = fCaloEvent->GetFit(0); // Lera's function
				fChiSq1  = fit->GetChisquare();
				fNDF1    = fit->GetNDF();
				fEnergy1 = fit->Integral(0,fNCaloPoints);
				fChiSq1div = fChiSq1/fNDF1;
				fit = fCaloEvent->GetFit(1); // Landau function
				fChiSq2  = fit->GetChisquare();
				fNDF2    = fit->GetNDF();
				fChiSq2div = fChiSq2/fNDF2;
				fEnergy2 = fit->Integral(0,fNCaloPoints);
				// Fill TTree
				fTree->Fill();
				// Debugging output
				TList* list = fCaloEvent->GetHistogram()->GetListOfFunctions();
				TIter next(list);
				while( (fit = (TF1*)next()) ) {
					if(fDebug) {
						printf("  Fit function \"%s\"\n", fit->GetName() );
						printf("    NDF:         %.3f\n", fit->GetNDF() );
						printf("    Chi squared: %.3f\n", fit->GetChisquare() ); 
						printf("    Parameter 0: %.7f +/- %.7f\n", fit->GetParameter(0), fit->GetParError(0) );
						printf("    Parameter 1: %.5f +/- %.5f\n", fit->GetParameter(1), fit->GetParError(1) );
						printf("    Parameter 2: %.5f +/- %.5f\n", fit->GetParameter(2), fit->GetParError(2) );
						printf("    Percentage difference: %.1f%%\n",
							(1-fCaloEvent->GetEnergy()/fCaloEvent->GetEnergyFit())*100 );
					}
				}
			}
			// Write histogram and close
			fCaloEvent->WriteHistograms();
			return Success;
		}
		// Return NODATA if failure at position in file stream
		return NoData;
	}

	// FINALISE FUNCTION: closes file stream of the calo data file and writes energy spectrum (of both the energies as computed using the fit integral and the sum of measurements) and TTree
	void TCaloLoader::Finalise() {
		// Close file stream
		fFileStream.close();
		if(fDebug) cout << "Closed file \"" << pCaloFileName << "\"" << endl;
		// Write histograms
		if(fEnergySpectrumFit) {
			fEnergySpectrumFit->Write();
			delete fEnergySpectrumFit;
		}
		if(fEnergySpectrumSum) {
			fEnergySpectrumSum->Write();
			delete fEnergySpectrumSum;
		}
		// Write TTree
		if(fTree) {
			fTree->Write();
			delete fTree;
		}
	}

// === PRIVATE FUNCTIONS =======
	// Function that determines the number of events in a txt file from the calorimeter
	UInt_t TCaloLoader::DetermineNEvents()
	{
		pTotalFiles = 0;
		ifstream in(pCaloFileName);
		while(in.getline(pBuffer,pBufferSize))
			if(!strcmp(pBuffer,"BoardID: 31")) ++pTotalFiles;
		return pTotalFiles;
	}
	// Function that continues reading from current position in the ifstream and and creates a new TCaloEvent from the data in this file.
	Bool_t TCaloLoader::LoadCaloEvent()
	{
		// Check if file stream is still ok
		if(!fFileStream.good()) {
			if(fDebug) cout << "Problem reading \"" << pCaloFileName << "\"" << endl;
			return false;
		}
		// Read record length
		fFileStream.getline(pBuffer,pBufferSize,':'); // check words "Record Length"
		if(strcmp(pBuffer,"Record Length")) {
			if(fDebug) cout << endl << "Record Length line incorrect format: " << pBuffer << endl;
			return false;
		}
		fFileStream.get(); // read ':'
		fFileStream >> fNCaloPoints;
		fFileStream.getline(pBuffer,pBufferSize); // finish line
		// Check line "BoardID"
		fFileStream.getline(pBuffer,pBufferSize);
		if(strcmp(pBuffer,"BoardID: 31")) {
			if(fDebug) cout << endl << "Board ID line incorrect format: " << pBuffer << endl;
			return false;
		}
		// Check line "Channel"
		fFileStream.getline(pBuffer,pBufferSize);
		if(strcmp(pBuffer,"Channel: 0")) {
			if(fDebug) cout << endl << "Channel line incorrect format: " << pBuffer << endl;
			return false;
		}
		// Read event number
		fFileStream.getline(pBuffer,pBufferSize,':'); // check words "Event Number"
		if(strcmp(pBuffer,"Event Number")) {
			if(fDebug) cout << endl << "Event Number line incorrect format: " << pBuffer << endl;
			return false;
		}
		fFileStream.get(); // read ':'
		fFileStream >> fEventNumber;
		fFileStream.getline(pBuffer,pBufferSize); // finish line
		// Check line "Pattern"
		fFileStream.getline(pBuffer,pBufferSize);
		if(strcmp(pBuffer,"Pattern: 0x0000")) {
			if(fDebug) cout << endl << "Pattern line incorrect format: " << pBuffer << endl;
			return false;
		}
		// Read timestamp and add to fCalorimeter
		fFileStream.getline(pBuffer,pBufferSize,':'); // check words "Trigger Time Stamp"
		if(strcmp(pBuffer,"Trigger Time Stamp")) {
			if(fDebug) cout << endl << "Timestamp line incorrect format: " << pBuffer << endl;
			return false;
		}
		fFileStream.get(); // read ':'
		fFileStream >> fTimestamp;
		fFileStream.getline(pBuffer,pBufferSize); // finish line
		// Check line "DC offset (DAC)"
		fFileStream.getline(pBuffer,pBufferSize);
		if(strcmp(pBuffer,"DC offset (DAC): 0x1999")) {
			if(fDebug) cout << endl << "DC offset line incorrect format: " << pBuffer << endl;
			return false;
		}
		// Create TCaloEvent
		fCaloEvent = new TCaloEvent(fEventNumber,fTimestamp,fNCaloPoints);
		fClipboard->Put(fCaloEvent);
		// Read all values of calo event (usually 1024)
		for(UShort_t i=0; i<fNCaloPoints; ++i) {
			// read value
			fFileStream >> fValue;
			// flip value if not first value
			if(i) {
				fValue -= fCaloEvent->GetValue(0);
				fValue *= -1;
			}
			/// store value
			fCaloEvent->SetValue(i,fValue); // puts value fFileStream list
		}
		fCaloEvent->SetValue(0,0);
		fFileStream.getline(pBuffer,pBufferSize); // finish line
		// Compute energy
		fCaloEvent->SetEnergy(fCaloEvent->GetHistogram()->Integral());
		return true;
	}